################################################################################

     **  LOCOSEQ  **

     Loop-based Controllable midi-Sequencer
     Sebastien MONDET
     Wed, 31 Oct 2007 19:02:31 +0100

################################################################################
## PRESENTATION

Locoseq (http://locoseq.googlecode.com) is a midi sequencer designed for live
playing looping tracks.  You can create control tracks (called "meta-tracks")
that drive the sequencer (schedule track x, mute, change tempo...) and you
can configure how the sequencer reacts on a given input (midi-in port or
keyboard). 

The application is built on top of the jack midi API, it is written in ocaml
(http://www.ocaml.org) (except some C code) and uses GTK+ and glade (thanks to
lablgtk2: http://wwwfun.kurims.kyoto-u.ac.jp/soft/lsl/lablgtk.html) for its
GUI.

The source code is available under a classic MIT license (see ./license.mit).

Current developers:
- Sebastien MONDET (http://sebmdt.googlepages.com)
- Frederic MOULINS

################################################################################
## INSTALLATION

** Requirements:

For the moment, let's talk about debian packages as the project is developed
under 64studio. 

Those packages should make you download all needed dependencies to compile the
application:

  apt-get install libjack-dev libxml-light-ocaml-dev omake ocaml-findlib \
   liblablgtk2-ocaml-dev

Those packages should make you download all needed dependencies to compile the
documentation:

  apt-get install tetex-bin tetex-extra hevea

** Build:

Just type:
 $  omake

################################################################################
## USE

** To launch the application:
 $  ./src/locoseq gui

** Examples:

In the test directory:
  \__ test
   |  \__ one_song.xml
   |  \__ tracks.mid
The xml is a "whole" song (open with "Open").
The mid is a midifile containing some tracks (import with "Add" in the
midi-tracks view), it has been made with seq24 (http://www.filter24.org/seq24/).

It's just for testing, it should render something more or less audible with a
classical General Midi setup (e.g. some FluidSynth listening to a jack-midi
port thanks to a2jmidid with a common soundfont).

** If it does not work:

This software is still under heavy development. If you detect problems please
send an e-mail to the developers. If you can, send them also the result of the
portability inspection:

 $  omake inspection

And send the file InspectionData/Inspection.t2t to the developers.




