Locoseq - Loop-based Controllable midi-Sequencer.
Sebastien MONDET
Tue, 31 Jul 2007 22:13:21 +0200

%!encoding: utf-8
%!preproc: '(?i)(Sebastien MONDET)'  '[\1 http://sebmdt.googlepages.com]'
%!options():--toc


+ Presentation +

Locoseq is a midi sequencer designed for live playing looping tracks.  You can
create control tracks (called "meta-tracks") that drive the sequencer (schedule
track //x//, mute, change tempo...) and you can configure how the sequencer
reacts on a given input (midi-in port or keyboard). 

The application is build on top of the alsa sequencer API, it is written in
[ocaml http://www.ocaml.org] (except the code wrapping asoundlib) and uses GTK+
and glade
([lablgtk2 http://wwwfun.kurims.kyoto-u.ac.jp/soft/lsl/lablgtk.html])
for its GUI.

The source code is available under a classic MIT license.

+ Installation And Usage +

++ Requirements ++

For the moment, let's talk about ubuntu packages as the project is developed
under ubntustudio. Those pakages should make you download all needed
dependencies:
```
apt-get install libasound2-dev libxml-light-ocaml-dev omake ocaml-findlib \
 liblablgtk2-ocaml-dev
```


++ Build ++

Just type:
``` omake

++ Use ++

Launch the application:
```
./src/locoseq gui
```

++ Examples ++

In the test directory:
```
\__ test
 |  \__ one_song.xml
 |  \__ tracks.mid
```
The xml is a "whole" song (open with "Open").
The mid is a midifile containing some tracks (import with "Add" in the
midi-tracks view), it has been made with [seq24 http://www.filter24.org/seq24/].

It's just for testing, it should render something more or less audible with a
classical General Midi setup (//e.g.// some FluidSynth with a common
soundfont).
%you can consider it as CreativeCommons-by.


++ If it does not work ++

This software is still under heavy development. If you detect problems please
send an e-mail to the developers. If you can, send then also the result of the
[portability inspection #inspect].


+ Development +

++ Portability Inspection ++[inspect]

To generate some debug information for the developers simply type (you will see
many errors in the term):
```
omake inspection
```
then, you can:
``` $BROWSER InspectionData/Inspection.xhtml
or
``` man InspectionData/Inspection.man
And send the file ``InspectionData/Inspection.t2t`` to the developers.


++ Standard Midi File Debug ++

You can dump a midi file:
``` ./src/locoseq parse <midi_file>


++ The file util.env ++

The command:
``` . util/util.env
should be useful as it gives some functions:
``mk``, ``cln``, ``svns`` (colorized ``'svn stat -u'``) and
docbro (open ocamlbrowser with many libs).

++ Development Tools ++

In addition to ocaml distribution and omake:
- the RAD tool used is ``glade-3`` (with special semi-compiler
  ``lablgladecc2``)
- for documentation, this file uses [txt2tags http://txt2tags.sourceforge.net/]
- for licence header management we use ``headache``


++ Documentation ++

``doc/manual/README.t2t`` is the "head" file of the documentation, to generate, text and XHTML, just type:
``` omake readme


++ The Source Tree ++

```
\__ src                                        
 |  \__ main.ml               -> main, inspection, midi test
 |  \__ midiFile.ml           -> midi file read and write
 |  \__ tracker.ml            -> the sequencer
 |  \__ midi.ml               -> manipulation of MIDI "Data"
 |  \__ alsa_interface.c      -> asoundlib wrapper
 |  \__ alsaSequencer.ml      -> OCamL functions for the wrapper
 |  \__ gui_files                   
 |   |  \__ app.glade         -> main Glade file
 |  \__ gui.ml                -> All the GUI code is there
 |  \__ stringServer.ml       -> attempt to group the user messages
 |  \__ seqApp.ml             -> the "model interface", many functions for gui.ml 
 |  \__ inputManager.ml       -> event handler of the tracker and midi listener
 |  \__ log.ml                -> logging facilities
\__ OMakefile                 -> General build file
\__ OMakeroot                 -> Root for omake
\__ test                                       
 |  \__ tracks.mid  
 |  \__ one_song.xml                             
\__ TODO                      -> the main todo list                
\__ doc                                        
 |  \__ manual                                 
 |   |  \__ doc.css           -> common CSS for the manual
 |   |  \__ README.t2t        -> source of this file
\__ util                      
 |  \__ util.env              -> utilities for development
\__ licence.mit               -> licence template
\__ README                    -> generated README file
```

+ Copyright +

This software is released under an MIT licence:

%!include: ``../../license.mit``

Current contributors are:
- Sebastien MONDET
- Frederic MOULINS


